name: lint

on:
  push:
    branches: [ main ]
    paths-ignore:
      - '**/*.gitattributes'
      - '**/*.gitignore'
      - '**/*.md'
  pull_request:
    branches:
      - main
      - dotnet-vnext
      - dotnet-nightly
  workflow_dispatch:

permissions:
  contents: read

env:
  FORCE_COLOR: 3
  TERM: xterm

jobs:
  lint:
    runs-on: ubuntu-latest

    steps:

    - name: Checkout code
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      with:
        filter: 'tree:0'
        show-progress: false

    - name: Add actionlint problem matcher
      run: echo "::add-matcher::.github/actionlint-matcher.json"

    - name: Lint workflows
      uses: docker://rhysd/actionlint@sha256:887a259a5a534f3c4f36cb02dca341673c6089431057242cdc931e9f133147e9 # v1.7.7
      with:
        args: -color

    - name: Lint markdown
      uses: DavidAnson/markdownlint-cli2-action@05f32210e84442804257b2a6f20b273450ec8265 # v19.1.0
      with:
        config: '.markdownlint.json'
        globs: |
          **/*.md

    - name: Lint PowerShell
      shell: pwsh
      run: |
        $ErrorActionPreference = "Stop"
        Invoke-ScriptAnalyzer -Path . -Recurse -IncludeDefaultRules -ReportSummary -Severity @('Error','Warning') -EnableExit

        $POWERSHELL_YAML_VERSION = "0.4.12"
        Install-Module -Name powershell-yaml -Force -MaximumVersion ${env:POWERSHELL_YAML_VERSION}

        $files = @()
        $files += Get-ChildItem -Path (Join-Path ${env:GITHUB_WORKSPACE} ".github" "workflows") -Filter *.yml
        $files += Get-ChildItem -Path (Join-Path ${env:GITHUB_WORKSPACE} ".github" "workflows") -Filter *.yaml

        $hasIssues = $false

        foreach ($file in $files) {
          $path = $file.FullName
          $content = Get-Content -Path $file.FullName -Raw

          $fileName = $path.Substring($PWD.Path.Length + 1).Replace('\', '/')
          $workflow = ConvertFrom-Yaml -Yaml $content

          Write-Output "Linting ${fileName}..."

          $errors = 0
          $warnings = 0

          foreach ($job in $workflow.jobs) {
            foreach ($step in $job.Values.steps) {
              if ($step.run -And $step.shell -eq 'pwsh') {
                $script = $step.run

                $firstLine = $script.Split("`n")[0]
                $offset    = (Select-String $path -Pattern ([regex]::Escape($firstLine))).LineNumber

                $issues = Invoke-ScriptAnalyzer -ScriptDefinition $script -IncludeDefaultRules -Severity @('Error','Warning')

                $errors   += $issues.Where({$_.Severity -eq 'Error' -or $_.Severity -eq 'ParseError'}).Count
                $warnings += $issues.Count - $errors

                foreach ($issue in $issues) {
                  $hasIssues = $true
                  $level = $issue.Severity -eq "Warning" ? "warning" : "error"
                  $line = $offset + $issue.Line - 1
                  Write-Output "::${level} file=${fileName},line=${line},title=PSScriptAnalyzer::${issue}"
                }
              }
            }
          }

          Write-Output "Errors: $($errors); Warnings: $($warnings)."
        }

        if ($hasIssues) {
          # https://github.com/actions/runner/issues/351
          $Host.SetShouldExit(1)
        }
